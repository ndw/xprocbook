<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.http-request">
<refnamediv>
<refname><step>p:http-request</step></refname>
<refpurpose>Interact with other systems over HTTP</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:http-request">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="byte-order-mark" cx:type="xsd:boolean"/>
  <p:option name="cdata-section-elements" select="''" cx:type="ListOfQNames"/>
  <p:option name="doctype-public" cx:type="xsd:string"/>
  <p:option name="doctype-system" cx:type="xsd:anyURI"/>
  <p:option name="encoding" cx:type="xsd:string"/>
  <p:option name="escape-uri-attributes" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="include-content-type" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="indent" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="media-type" cx:type="xsd:string"/>
  <p:option name="method" select="'xml'" cx:type="xsd:QName"/>
  <p:option name="normalization-form" select="'none'" cx:type="NormalizationForm"/>
  <p:option name="omit-xml-declaration" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="standalone" select="'omit'" cx:type="true|false|omit"/>
  <p:option name="undeclare-prefixes" cx:type="xsd:boolean"/>
  <p:option name="version" select="'1.0'" cx:type="xsd:string"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <code>p:http-request</code> step allows you to interact with
other systems over HTTP. You describe the interaction that you want to have
with the system in the form of a <tag>c:request</tag> document sent to the
<port>source</port> input port. The response that comes back from the
system is returned in the <port>result</port> port. The step provides
a lot of flexibility in how the response is presented.</para>

<para>This step is actually quite complicated because it attempts to
provide a uniform interface to all of the possible HTTP methods, with
and without authentication, and to handle sending and receiving both
single and multipart message bodies that may or may not be
XML.</para>

<para>Don’t let the all of the possible complexity persuade you into thinking
that it has to be complex. Here’s a simple example that retrieves the
XProc specification from the W3C website:</para>

<programlisting><![CDATA[  <p:http-request>
    <p:input port="source">
      <p:inline>
        <c:request method="GET"
                   href="http://www.w3.org/TR/xproc/langspec.xml"/>
      </p:inline>
    </p:input>
  </p:http-request>]]></programlisting>

<para>If most of your web interactions are simple HTTP “GET” requests, it
may be useful to write a wrapper that provides direct support for those
simple cases. In the examples below, you’ll find a <step>cx:http-get</step>
pipeline that simplifies the above example to a single line:</para>

<programlisting>&lt;cx:http-get href="http://www.w3.org/TR/xproc/langspec.xml"/></programlisting>

<para>Now let’s look at the step in all it’s generality. Everything begins
with the request. A <tag>c:request</tag> element has the following form:</para>

<programlisting>&lt;c:request
  method = NCName
  href? = anyURI
  username? = string
  password? = string
  auth-method? = string
  send-authorization? = boolean
  override-content-type? = string
  detailed? = boolean
  status-only? = boolean>
    (c:header*, (c:body | c:multipart)?)
&lt;/c:request></programlisting>

<para>The <att>method</att> attribute must be one of the HTTP methods
(one of the methods supported by the system with which you’re
interacting). The <att>href</att> attribute identifies the URI that you want to
interact with. The <att>username</att>, <att>password</att>,
<att>auth-method</att>, and <att>send-authorization</att> attributes
control authentication, see <xref linkend="http-auth"/>, below. The
<att>override-content-type</att> attribute allows you to change the
interpretation of the result; the <att>detailed</att> and
<att>status-only</att> attributes control how much detail is exposed
in the result, see <xref linkend="c.request_response"/>, also below.</para>

<para>The content of the <tag>c:request</tag> consists of any number
of <tag>c:header</tag> elements, followed optionally by a
<tag>c:body</tag> or a <tag>c:multipart</tag>.
</para>

<para>A <tag>c:header</tag> element allows you to send additional HTTP
headers with the request:</para>

<programlisting>&lt;c:header
  name = string
  value = string /></programlisting>

<para>The <att>name</att> and <att>value</att> attributes specify the name
and value of the header, respectively. As we’ll see below, the
<tag>c:header</tag> element is also used to present the headers that
the server sends back.</para>

<para>If you’re doing an HTTP “GET”, then you don’t send any content to the
server, but for HTTP “POST” or “PUT” requests (among others), data is sent
to the server using a <tag>c:body</tag> or <tag>c:multipart</tag>
elements.</para>

<para>The HTTP request is formulated from the elements in the request
and transmitted to the host specified by the <code>href</code>
attribute.</para>

<refsection xml:id="c.request_body">
<title>Formulating the request</title>

<para>The <tag>c:body</tag> element holds the body (or in the case of
a <link linkend="multipart-requests">multipart message</link>, each of the
body parts) of the message:</para>

<programlisting>&lt;c:body
  content-type = string
  encoding? = string
  id? = string
  description? = string>
    <emphasis>any content</emphasis>
&lt;/c:body></programlisting>

<para>The <code>content-type</code> attribute specifies the media type
of the body or body part, for example, “<literal>application/xml</literal>”
“<literal>text/plain</literal>”, or “<literal>image/png</literal>”. In
HTTP terms, this is the value used for the
<literal xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</literal>
header. The <att>encoding</att> is used for images and other non-text types, see
<xref linkend="binary-types"/>, below.</para>

<para>In some applications, usually multipart requests, it may be useful or
necessary to specify a
<literal xlink:href="http://www.apps.ietf.org/rfc/rfC1521.html#sec-6.1">Content-ID</literal>
or
<literal xlink:href="http://www.apps.ietf.org/rfc/rfc1521.html#sec-6.2">Content-Description</literal> in the request. You can specify these values with the
<att>id</att> and <att>description</att> attributes, respectively.</para>

<para>After establishing the headers for a request body, the processor
has to actually package it up for transmission to the server. Exactly
how this packaging is done depends on the <att>content-type</att>
specified.</para>

<itemizedlist>
<listitem>
<para>If the content type specifies an XML media type, then the body
is serialized using the options specified on the
<step>p:http-request</step> and the resulting serialized form is sent
to the server. In other words, if the body is XML, the processor does
what you’d expect to send the XML over the wire.</para>
</listitem>
<listitem>
<para>If the content type does not specify an XML media type, or if an
<att>encoding</att> is specified, then the content of the <tag>c:body</tag>
element is sent directly. In this case, you must have constructed the
<tag>c:body</tag> so that it contains exactly, and only, the characters
that you want sent. In other words, you have to encode it before you
put it in the <tag>c:body</tag> element.</para>
</listitem>
</itemizedlist>

<refsection xml:id="multipart-requests">
<title>Multipart requests</title>

<para>Sometimes you want to send more than a single document to the server.
Some systems address this by specifying a specific packaging system, such
as sending a single ZIP file containing all the parts, but other systems
use “<link xlink:href="http://www.apps.ietf.org/rfc/rfc1521.html#sec-7.2">multipart
MIME</link>” for the packaging.
In <step>p:http-request</step> this is supported through the use
of the <tag>c:multipart</tag> element:</para>

<programlisting>&lt;c:multipart
  content-type = string
  boundary = string>
    c:body+
&lt;/c:multipart></programlisting>

<para>The <att>content-type</att> specified must be a multipart media
type. If it’s not specified, a value of
“<literal>multipart/mixed</literal>” is used.</para>

<para>In the request sent to the server, all of the parts are sent in
a single stream. The boundaries between each part are identified with
a boundary string. It’s your responsibility to specify the
<att>boundary</att> string and it’s critically important that you
specify a value that <emphasis>will not</emphasis> occur in the
(possibly encoded) representations of any of the parts.</para>

<para>Each individual <tag>c:body</tag> part is handled as described
above.</para>
</refsection>
</refsection>

<refsection xml:id="c.request_response">
<title>Interpreting the response</title>

<para>How the processor interprets the part (or parts) that are
returned depends critically on the value of the content type header
that the server sends. A content type of
“<literal>application/xml</literal>” is naturally going to be
processed quite differently than a content type of
“<literal>image/png</literal>”. If the <tag>c:request</tag> specifies
an <att>override-content-type</att>, then that value is used to
determine how the part (or parts) are interpreted. Even if an override
is specified, however, the actual content type sent by the server will
be presented in the <tag>c:header</tag>, if there is one.</para>

<para>In the discussion below, “content type” refers to the content
type that the processor is using, either the one the server sent or
the one the request specified, as appropriate.</para>

<para>If you make an HTTP request, your presumably expecting some sort
of response. Sometimes you need to be able check the status code,
inspect the headers, interrogate the relationships between the parts,
etc.</para>

<para>In this case, you want the response to include all of the detail
that it can. The XProc processor provides this in the form of a
<tag>c:response</tag> element:</para>

<programlisting>&lt;c:response
  status? = integer>
    (c:header*, (c:body | c:multipart)?)
&lt;/c:response></programlisting>

<para>The response’s status code is encoded in the <code>status</code>
attribute and the headers and entity body are returned in
<tag>c:header</tag> and <tag>c:multipart</tag> or <tag>c:body</tag>
content.</para>

<para>But often, you know that you’re going to get back, for example,
a single XML document. If you expect the step to succeed and you just
want the document back, it’s tedious to have to remember to unpack it
from inside the <tag>c:response</tag> wrapper every time. To alleviate
this tedium, the <tag>c:request</tag> allows you to specify whether or
not you want a “detailed” response:</para>

<itemizedlist>
<listitem>
<para>If <att>detailed</att> is “<literal>true</literal>”, you get
back a <tag>c:response</tag> element containing all the headers and
the body or bodies.</para>
</listitem>
<listitem>
<para>If <att>detailed</att> is not specified or is explicitly
“<literal>false</literal>”, the body (or each of the bodies) is
converted into an XML representation and returned.</para>
</listitem>
</itemizedlist>

<para>In other words, you can get all the detail if you want, but the
default is just to return the document (or sequence of documents) that
the server sends back in its response.</para>

<para>The output of a <step>p:http-request</step> must be XML, so the
body (or each of the bodies) has to be converted into an XML
representation. For media types (images, binaries, etc.) that can’t be
represented as a sequence of Unicode characters, the response is
<literal>base64</literal> encoded and then returned in a
<tag>c:body</tag> element. If the content is base64-encoded, the
<tag class="attribute">encoding</tag> attribute on <tag>c:body</tag> will
be set to “<literal>base64</literal>”.</para>

<para>If the media type isn’t XML but can be represented as a sequence
of Unicode characters, the content of the
<tag>c:body</tag> element will be those characters. In this case,
there will be no <att>encoding</att> attribute on the <tag>c:body</tag>.</para>

<para>If the response is an XML media type, the content of the
constructed <tag>c:body</tag> element is the result of decoding the
body as necessary, then parsing it with an XML parser. If the content
is not well-formed, the step fails.</para>

<para>In the case of a multipart response, the same rules apply when
constructing a <tag>c:body</tag> element for each body part
encountered.</para>

<para>There’s one more special case. If the <att>status-only</att>
attribute on the <tag>c:request</tag> is “<literal>true</literal>”,
the result document will always be a <tag>c:response</tag> containing
only header information. The response will not be processed to produce
a <tag>c:body</tag> or <tag>c:multipart</tag> element at all.</para>
</refsection>

<refsection xml:id="http-auth">
<title>HTTP Authentication</title>

<para>Several attributes on the <tag>c:request</tag> control if
and how authentication is performed.</para>

<para>If the <att>username</att> attribute is specified, the
<att>username</att>, <att>password</att>,
<att>auth-method</att>, and <att>send-authorization</att>
attributes are used to handle authentication according to the selected
authentication method.</para>

<para>The <att>username</att> and <att>password</att> specify the
authentication credentials of the user. The <att>auth-method</att>
specifies the expected authentication method. If the
authentication method is “<literal>Basic</literal>” or
“<literal>Digest</literal>”, authentication is handled as per
<biblioref linkend="rfc2617"/>. Other values are allowed, but their
meaning is <glossterm>implementation-defined</glossterm>.</para>

<para>Authentication generally requires several messages sent back and forth
between the client and the server. The client requests access, the server
responds with a challenge, the client replies with appropriate credentials,
and then the server sends back the actual response. If you’re using
basic authentication, you can avoid one round trip by setting
<att>send-authentication</att> to “<literal>true</literal>”. If you do,
the credentials are sent on the first request. This only works for
basic authentication, however, because other methods require information
from the challenge to construct the credentials.</para>
</refsection>

<refsection xml:id="other-protocols">
<title>Supporting other protocols</title>

<para>In the case of simple “GET” requests, implementors are
encouraged to support as many protocols as practical. In particular,
pipeline authors may attempt to use <tag>p:http-request</tag> to load
documents with computed URIs using the <literal>file:</literal>
scheme.</para>

</refsection>

<refsection xml:id="binary-types">
<title>Binary content</title>

<para>Several steps use “base64” encoding to transmit binary data
through an XProc pipeline. The <att>encoding</att> attribute controls
the decoding of the element content for formulating the request.</para>

<para>A value of “<literal>base64</literal>” indicates the element’s
content is a base64 encoded string whose byte stream should be sent as
the message body. An implementation may support encodings other than
<literal>base64</literal> but these encodings and their names are
<glossterm>implementation-defined</glossterm>.</para>
</refsection>

<refsection xml:id="cookies">
<title>Cookies</title>

<para>With one exception, in version 1.0 of XProc, the
<tag>p:http-request</tag> step does not provide any standard
mechanisms for managing cookies. Pipeline authors that need to
preserve cookies across several <tag>p:http-request</tag> calls in the
same pipeline or across multiple invocations of the same or different
pipelines will have to rely on
<glossterm>implementation-defined</glossterm> mechanisms.
</para>

<para>The exception arises in the case of redirection. If a redirect
response includes cookies, those cookies are forwarded as appropriate
to the redirected location when the redirection is followed.</para>

<para>This behavior allows the <tag>p:http-request</tag> step to
interoperate with web services that use cookies as part of an
authentication protocol.</para>
</refsection>

<refsection xml:id="html">
<title>HTML content</title>

<para>HTML isn’t always (in fact, rarely is) well-formed XML. But it
can be represented in Unicode, so by the rules in <xref
linkend="c.request_response"/>, any content identified as
<code>text/html</code> will be encoded as (escaped) text or
base64-encoded in the <tag>c:body</tag> element.
</para>

<para>If you want to treat the HTML content as XML, you can attempt to
convert it into XML using the <tag>p:unescape-markup</tag>
step.</para>
</refsection>
</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0040"/></entry>
<entry>Occurs
if the document element of the document that arrives on the
<port>source</port> port is not <tag>c:request</tag>.
</entry>
</row>
<row>
<entry><error code="C0006"/></entry>
<entry>Occurs
if the
<tag class="attribute">method</tag> is not specified on a <tag>c:request</tag>.

</entry>
</row>
<row>
<entry><error code="C0005"/></entry>
<entry>Occurs
if the
request contains a <tag>c:body</tag> or <tag>c:multipart</tag> but the
<tag class="attribute">method</tag> does not allow for an entity body being sent with the request.
</entry>
</row>
<row>
<entry><error code="C0004"/></entry>
<entry>Occurs
if the
<code>status-only</code> attribute has the value <literal>true</literal> and
the <code>detailed</code> attribute does not have the value <literal>true</literal>.
</entry>
</row>
<row>
<entry><error code="C0003"/></entry>
<entry>Occurs
if a <option>username</option>
or <option>password</option> is specified without specifying an
<option>auth-method</option>, if
the requested
<option>auth-method</option> isn’t supported, or the authentication
challenge contains an authentication method that isn’t
supported.
</entry>
</row>
<row>
<entry><error code="C0020"/></entry>
<entry>Occurs
if the the user specifies a value
or values that are inconsistent with each other or with the requirements
of the step or protocol.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<para>Most of the examples in this section interact with small web services
hosted at <link xlink:href="http://tests.xproc.org/"/>. These services were
designed to help test various aspects of the <step>p:http-request</step> step.
As such, they tend to be small and simple, if not particularly useful.</para>

<xi:include href="build/http-request.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
