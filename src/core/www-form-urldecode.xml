<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.www-form-urldecode">
<refnamediv>
<refname><step>p:www-form-urldecode</step></refname>
<refpurpose>Decodes URL encoded form data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:www-form-urldecode">
  <p:output port="result"/>
  <p:option name="value" required="true" cx:type="xsd:string"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The most common way for browsers to send parameters to a web service
is with an encoding called “<literal>x-www-form-urlencoded</literal>”.
You’ve all seen it:</para>

<screen>http://example.org/service?a=b&amp;c=d&amp;e=&amp;f</screen>

<para>The “<literal>a=b&amp;c=d&amp;e=&amp;f</literal>” part is the
three parameters (a=b, c=d, and e=f) sent in
<literal>x-www-form-urlencoded</literal> format.</para>

<para>The <step>p:www-form-urldecode</step> step interprets a URL
encoded string and returns a <tag>c:param-set</tag> containing the
parameters.
This step is the effectively the opposite of
<step>p:www-form-urlencode</step>.
</para>

<para>The order of the <tag>c:param</tag> elements in the result is the same
as the order of the encoded parameters, reading from left to right.</para>

<para>If any parameter name occurs more than once in the encoded string,
the resulting parameter set will contain a <tag>c:param</tag> for
each instance. However, only one of these will actually be used if the
parameter set is passed to another step on its <glossterm>parameter
input port</glossterm>.</para>

<para>One limitation of this step is that it cannot represent a set of
parameters if the names are not ordinary XML “local names”. Attempting
to decode the following string, for example, will cause the step to
fail:</para>

<screen>x::y=value</screen>

<para>The name “<literal>x::y</literal>” cannot be represented in a
<tag>c:param-set</tag>.</para>

</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0037"/></entry>
<entry>Occurs
if the <option>value</option> provided
is not a properly
<literal>x-www-form-urlencoded</literal> value.
</entry>
</row>
<row>
<entry><error code="C0061"/></entry>
<entry>Occurs
if the name of any encoded parameter
name is not a valid XML name (without a colon).
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/www-form-urldecode.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
