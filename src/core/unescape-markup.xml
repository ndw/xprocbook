<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.unescape-markup">
<refnamediv>
<refname><step>p:unescape-markup</step></refname>
<refpurpose>Converts “escaped XML” back into real XML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:unescape-markup">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="namespace" cx:type="xsd:anyURI"/>
  <p:option name="content-type" select="'application/xml'" cx:type="xsd:string"/>
  <p:option name="encoding" cx:type="xsd:string"/>
  <p:option name="charset" cx:type="xsd:string"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <step>p:unescape-markup</step> step takes the string value of
the document element and parses the content as if it was a Unicode
character stream containing serialized XML. The output is the result
of that parse inside the same document element wrapper. This
is the reverse of the <step>p:escape-markup</step> step.</para>

<para>When the string value is parsed, the original document element
is preserved so that the result will be well-formed XML even if the
content consists of multiple, sibling elements.</para>

<para>The <option>namespace</option> option specifies a default
namespace. Elements that are in no namespace in the unescaped content
will be placed into this namespace unless there is an in-scope
namespace declaration that specifies a different namespace (or
explicitly undeclares the default namespace).</para>

<para>The <option>content-type</option> option can be used to specify
an alternate content type for the string value. Implementations can
use this value to select different parsing strategies for converting
escaped text into XML. For example, if the value
<literal>text/html</literal> is used, XML Calabash parses with
<biblioref linkend="tagsoup"/>, which just about guarantees that any
random, sloppy collection of markup will produce well-formed
XML.</para>

<para>If you specify <literal>application/xml</literal>, all
implementations must use a standard XML parser for it. Behavior of
<step>p:unescape-markup</step> for <option>content-type</option>s other
than <literal>application/xml</literal> is
<glossterm>implementation-defined</glossterm>.</para>

<para>The serialized form of an XML document is a sequence of Unicode
characters. If the escaped markup is not in a Unicode-compatible
character set, it may be encoded (so that it can be carried as a
payload in an XML document). In this case the
<option>encoding</option> option must be used.</para>

<para>If an <option>encoding</option> is specified, a
<option>charset</option> may also be specified. The character set may
be specified as a parameter on the <option>content-type</option> or
via the separate <option>charset</option> option. If the specified
<option>encoding</option> is <literal>base64</literal>, then the
character set must be specified.
</para>

<para>If no <option>encoding</option> is specified, the character set
is ignored, irrespective of where it was specified.</para>
</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0051"/></entry>
<entry>Occurs
if the content-type specified is not supported by
the implementation.
</entry>
</row>
<row>
<entry><error code="C0052"/></entry>
<entry>Occurs
if the
encoding specified is not supported by the
implementation.
</entry>
</row>
<row>
<entry><error code="C0010"/></entry>
<entry>Occurs
if an encoding of <literal>base64</literal> is specified and
the character set is not specified or if the specified
character set is not supported by the implementation.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/unescape-markup.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
