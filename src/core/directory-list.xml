<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.directory-list">
<refnamediv>
<refname><step>p:directory-list</step></refname>
<refpurpose>Lists the files, directories, and other contents of a directory on the filesystem</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:directory-list">
  <p:output port="result"/>
  <p:option name="path" required="true" cx:type="xsd:anyURI"/>
  <p:option name="include-filter" cx:type="RegularExpression"/>
  <p:option name="exclude-filter" cx:type="RegularExpression"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <code>p:directory-list</code> step lists the contents of the
specified directory on the filesystem.</para>

<para>The value of the <option>path</option> option is interpreted as
an IRI reference. If it is relative, it is made absolute against the
base URI of the element on which it is specified.</para>

<para>The values of the <option>include-filter</option> and
<option>exclude-filter</option> options are regular expression as
specified in <biblioref linkend="xqt-fando"/>, section 7.61
“<citetitle>Regular Expression Syntax</citetitle>”.</para>

<para>If the <option>include-filter</option> pattern matches the name
of a filesystem object, that object is included in the output. If the
<option>exclude-filter</option> pattern matches the name, that object
is excluded from the output. If both options are provided, the include
filter is processed first, then the exclude filter.</para>

<para>Processors must support directory paths whose scheme is <uri
type="scheme">file:</uri>; they may also support other schemes, but
the semantics of those schemes is
<glossterm>implementation-defined</glossterm>.</para>

<para>The “<tag>c:directory</tag>” document that the
<step>p:directory-list</step> step produces lists the included
filesystem objects. The base URI of the document is
the directory path read; it has a <tag class="attribute">name</tag>
attribute that is the last segment of the directory path.
</para>

<para>The children of the <tag>c:directory</tag> element represent
each of the included filesystem objects:</para>

<itemizedlist>
<listitem>
<para>A <tag>c:directory</tag> is produced for each subdirectory.
</para>
</listitem>
<listitem>
<para>A <tag>c:file</tag> is produced for each file.
</para>
</listitem>
<listitem>
<para>If the filesystem supports “special” objects (devices, links, etc.),
those may be represented with <tag>c:other</tag> elements. Exactly what
constitutes “special” is <glossterm>implementation-defined</glossterm>
and may vary by platform.</para>
</listitem>
</itemizedlist>

<para>The <step>c:directory-list</step> step does not process subdirectories
recursively. For recursive processing, see
<xref linkend="ex.recursive-directory-list"/>.</para>

<para>Each of the elements <tag>c:file</tag>, <tag>c:directory</tag>,
and <tag>c:other</tag> has a <code>name</code> whose
value is a relative IRI reference, giving the (local) file or
directory name.
Implementations may include additional attributes.
</para>

</refsection>

<refsection>
<title>Errors</title>

<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0012"/></entry>
<entry>Occurs
if the step cannot read the specified directory due to access restrictions
or if the environment doesn’t support the notion of a hierarchical directory
structure.
</entry>
</row>
<row>
<entry><error code="C0017"/></entry>
<entry>Occurs
if the absolute <option>path</option> does not specify a directory.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/directory-list.xml" xpointer="xpath(/*/*)"/>

</refsection>

<refsection>
<title>A Recursive Directory Listing</title>

<para>The standard <step>p:directory-list</step> step does not build
an entire tree, it only returns the contents of a single directory.
But it’s easy to write your own recursive processor directly in
XProc:</para>

<programlisting
><xi:include href="../xpl/recursive-directory-list.xpl"
             parse="text"
/></programlisting>

<para>The slightly convoluted <step>p:choose</step> is a consequence of
limitations in how <function>p:value-available</function> works;
see <xref linkend="p.value-available"/>.</para>

</refsection>

</refentry>
