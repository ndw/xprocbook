<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.rename">
<refnamediv>
<refname><step>p:rename</step></refname>
<refpurpose>Renames elements, attributes, or processing instructions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:rename">
  <p:input port="source"/>
  <p:output port="result"/>
  <p:option name="match" required="true" cx:type="XSLTMatchPattern"/>
  <p:option name="new-name" required="true" cx:type="xsd:QName"/>
  <p:option name="new-prefix" cx:type="xsd:NCName"/>
  <p:option name="new-namespace" cx:type="xsd:anyURI"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <code>p:rename</code> step renames matching elements,
attributes, or processing-instructions in the document. It doesn’t
make any sense to match comment or text nodes, they don’t have
names.</para>

<para>If the <option>new-name</option> value contains a colon, then
its value is interpreted as a QName and there must be an in-scope namespace
declaration for that prefix in the pipeline document. It is an error in this
case to specify either an <option>new-prefix</option> or
<option>new-namespace</option>.</para>

<para>If the <option>new-name</option> option does not contain a
colon, you can use the <option>new-namespace</option> and
<option>new-prefix</option> options to place it in a namespace and
provide a suggested prefix.</para>

<para>Each element, attribute, or processing-instruction that matches
the <option>match</option> option is renamed with the specified name.
In the case of attributes, if the element already had an attribute with
the specified name, it is effectively deleted before the renaming is
performed.
</para>

<para>With respect to attributes named “<literal>xml:base</literal>”,
the following semantics apply: renaming an <emphasis>from</emphasis>
“<literal>xml:base</literal>” <emphasis>to</emphasis> something else
has no effect on the underlying base URI of the element; however, if
an attribute is renamed <emphasis>from</emphasis> something else
<emphasis>to</emphasis> “<literal>xml:base</literal>”, the base URI of
the element is updated accordingly.</para>

<para>If the pattern matches processing instructions, then it is the
processing instruction target that is renamed. In this case, it’s an error
if the new name specifies a namespace.</para>

</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0023"/></entry>
<entry>Occurs
if the pattern matches anything other than element,
attribute or processing instruction nodes.
</entry>
</row>
<row>
<entry><error code="D0034"/></entry>
<entry>Occurs
It is a
<glossterm>dynamic error</glossterm> to specify a new namespace or
prefix if the lexical value of the specified name contains a
colon.
</entry>
</row>
<row>
<entry><error code="C0013"/></entry>
<entry>Occurs
if the pattern matches
a processing instruction and the new name has a non-null namespace.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/rename.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
