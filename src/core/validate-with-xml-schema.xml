<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.validate-with-xml-schema">
<refnamediv>
<refname><step>p:validate-with-xml-schema</step></refname>
<refpurpose>Validates a document using W3C XML Schema</refpurpose>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:validate-with-xml-schema">
  <p:input port="source" primary="true"/>
  <p:input port="schema" sequence="true"/>
  <p:output port="result"/>
  <p:option name="use-location-hints" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="try-namespaces" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="assert-valid" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="mode" select="'strict'" cx:type="strict|lax"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <tag>p:validate-with-xml-schema</tag> step applies
<biblioref linkend="xmlschema-1"/>
validity assessment to its input document. If
<option>assert-valid</option> is true, the step fails if the document
is invalid, otherwise a copy of the input appears on the output,
possibly representing an augmented PSVI.</para>

<para>Validation is performed against the set of schemas represented
by the documents on the <port>schema</port> port. These schemas must
be used in preference to any schema locations provided by schema
location hints encountered during schema validation, that is, schema
locations supplied for <code>xs:import</code> or
<code>xsi:schema-location</code>, or determined by
schema-processor-defined namespace-based strategies, for the
namespaces covered by the documents available on the schemas port.</para>

<para>If <code>xs:include</code> elements occur within the supplied
schema documents, they are treated like any other
external documents (see <xref linkend="external-docs"/>). It is
<glossterm>implementation-defined</glossterm> if the documents
supplied on the <port>schemas</port> port are considered when
resolving <code>xs:include</code> elements in the schema documents
provided.
</para>

<para>The <option>use-location-hints</option> and
<option>try-namespaces</option> options allow the pipeline author to
control how the schema processor should attempt to locate schema
documents necessary but not provided on the <port>schema</port> port.
Any schema documents provided on the <port>schema</port> port are used
in preference to schema documents located by other means.</para>

<para>If the <option>use-location-hints</option> option is
“<literal>true</literal>”, the processor should make use of schema
location hints to locate schema documents. If the option is
“<literal>false</literal>”, the processor should ignore any such
hints.</para>

<para>If the <option>try-namespaces</option> option is
“<literal>true</literal>”, the processor should
attempt to dereference the namespace URI to locate schema documents.
If the
option is “<literal>false</literal>”, the processor
should not dereference namespace URIs.</para>

<para>The <option>mode</option> option allow the pipeline author to
control how schema validation begins. It must be either
“<literal>strict</literal>” or “<literal>lax</literal>”.
The “<literal>strict</literal>”
mode means that the document element must be declared and
schema-valid, otherwise it will be treated as invalid. The
“<literal>lax</literal>” mode means that the
absence of a declaration for the document element does not itself
count as an unsuccessful outcome of validation.</para>

<para>If the <option>assert-valid</option>
option is <literal>false</literal>, it is not an error for the document
to be invalid. In this case, if the implementation does not
support the PSVI, <tag>p:validate-with-xml-schema</tag> is essentially
just an “identity” step, but if the implementation <emphasis>does</emphasis>
support the PSVI, then the resulting document will have additional type
information (at least for the subtrees that are valid).</para>

<para>The <port>result</port> of the assessment is a document with the
Post-Schema-Validation-Infoset (PSVI) (<biblioref
linkend="xmlschema-1"/>) annotations, if the pipeline implementation
supports such annotations. If not, the input document is reproduced
with any defaulting of attributes and elements performed as specified
by the XML Schema recommendation.</para>
</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0053"/></entry>
<entry>Occurs
if the <option>assert-valid</option> option is <literal>true</literal>
and the input document is not valid.
</entry>
</row>
<row>
<entry><error code="C0055"/></entry>
<entry>Occurs if a <option>mode</option> is specified and
the implementation does not support the specified mode.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/validate-with-xml-schema.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
