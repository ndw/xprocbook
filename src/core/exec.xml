<?xml-model title="DocBook customization for the XProc book"
            href="../../schemas/xproc.rnc" 
            type="application/relax-ng-compact-syntax" ?>
<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:cx="http://xmlcalabash.com/ns/extensions"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:p="http://www.w3.org/ns/xproc"
          xml:id="p.exec">
<refnamediv>
<refname><step>p:exec</step></refname>
<refpurpose>Runs an external command</refpurpose>
<refclass>optional</refclass>
</refnamediv>

<refsynopsisdiv>
<p:declare-step type="p:exec">
  <p:input port="source" primary="true" sequence="true"/>
  <p:output port="result" primary="true"/>
  <p:output port="errors"/>
  <p:output port="exit-status"/>
  <p:option name="command" required="true" cx:type="xsd:string"/>
  <p:option name="args" select="''" cx:type="xsd:string"/>
  <p:option name="cwd" cx:type="xsd:string"/>
  <p:option name="source-is-xml" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="result-is-xml" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="wrap-result-lines" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="errors-is-xml" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="wrap-error-lines" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="path-separator" cx:type="xsd:string"/>
  <p:option name="failure-threshold" cx:type="xsd:integer"/>
  <p:option name="arg-separator" select="' '" cx:type="xsd:string"/>

  <!-- plus the serialization options -->
  <p:option name="byte-order-mark" cx:type="xsd:boolean"/>
  <p:option name="cdata-section-elements" select="''" cx:type="ListOfQNames"/>
  <p:option name="doctype-public" cx:type="xsd:string"/>
  <p:option name="doctype-system" cx:type="xsd:anyURI"/>
  <p:option name="encoding" cx:type="xsd:string"/>
  <p:option name="escape-uri-attributes" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="include-content-type" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="indent" select="'false'" cx:type="xsd:boolean"/>
  <p:option name="media-type" cx:type="xsd:string"/>
  <p:option name="method" select="'xml'" cx:type="xsd:QName"/>
  <p:option name="normalization-form" select="'none'" cx:type="NormalizationForm"/>
  <p:option name="omit-xml-declaration" select="'true'" cx:type="xsd:boolean"/>
  <p:option name="standalone" select="'omit'" cx:type="true|false|omit"/>
  <p:option name="undeclare-prefixes" cx:type="xsd:boolean"/>
  <p:option name="version" select="'1.0'" cx:type="xsd:string"/>
</p:declare-step>
</refsynopsisdiv>

<refsection>
<title>Description</title>

<para>The <step>p:exec</step> step runs an external command. It can pass
a document to the “standard input” of the command and it can return both
the command’s “standard output” and “standard error” as XML documents.</para>

<para>The <step>p:exec</step> step executes the command passed on
<option>command</option> with the arguments passed on
<option>args</option>. The processor does not interpolate the values
of the <option>command</option> or <option>args</option> (for example,
expanding references to environment variables).
</para>

<para>If <option>cwd</option> is specified, then the current working
directory is changed to the value of that option before execution
begins. If <option>cwd</option> is not specified, the current working
directory is <glossterm>implementation-defined</glossterm>.</para>

<para>Although the step is optional and therefore not guaranteed to be
portable, some care has been taken to address at least the most common
cross-platform issues: path and argument separators.</para>

<para>Unix-based systems us a forward slash to separate the components
of a path, for example <filename>/usr/bin/ls</filename>. On
Windows-based systems, the backward slash is used, for example:
<filename>\usr\bin\ls</filename>. Assuming that you want to run a
<step>p:exec</step> step on both kinds of systems, and you’ve already
arranged for the actual path name of the command to be the same on
both systems, you couldn’t easily write the <step>p:exec</step> step
because no matter which character you chose, it would only work on one
of the systems.</para>

<para>XProc addresses this with a <option>path-separator</option> option.
This option, which must be exactly one character, will be replaced in
<option>command</option> and <option>args</option> options with the
appropriate, platform-specific path separator character.</para>

<para>A similar problem exists for the command line arguments. It’s
common to separate arguments with spaces. For example,
“<literal>a b c</literal>” is usually interpreted as three distinct
arguments, “<literal>a</literal>”, “<literal>b</literal>”, and
“<literal>c</literal>”.</para>

<para>A the same time, it’s become quite common for filenames to contain
spaces. This leads to a dilemma. Given a file named
“<filename>My Report.xml</filename>”, how do I pass it to a command without
having it interpreted as two arguments: “<literal>My</literal>” and
“<literal>Report.xml</literal>”.</para>

<para>Command line tools usually get around this problem by introducing
various quoting mechanisms. Double quotes around the filename, for example,
tell the shell to recognize it as a single argument, and a backslash in front
of a character often causes it to be interpreted literally (allowing even
uncommon filenames like “<filename>My "report".xml</filename>” to be
processed).</para>

<para>XML already has its own notion of special characters and an
escaping mechanism for them, not a mechanism that can reasonably be
extended to cover this case. Adding <emphasis>another</emphasis>
mechanism for escaping characters in this context would have been
confusing. What’s more, XProc doesn’t really give the pipeline author
a convenient way to analyze the arguments, select an appropriate,
escaping mechanism, and use it. That’s just not the sort of thing it’s
made to do.</para>

<para>XProc attacks the problem a different way, it provides an
<option>arg-separator</option> option, which defaults to a space. Every
occurrence of this character in the <option>args</option> string is
interpreted as a separator between arguments. Using this mechanism, you can
pass filenames with special characters along with other arguments simply
by picking a different separator:</para>

<programlisting>&lt;p:exec command="dosomething"
        arg-separator="!"
        args='-f!My "report".xml' …>
…
&lt;/p:exec></programlisting>

<para>This has one unfortunate consequence: if you separate arguments
with <emphasis>multiple spaces</emphasis>, each space gets interpreted
as a separator and you get empty strings as individual arguments which
is rarely what you want. Either pick an explicit separator character or
make sure you use only a single space between arguments.</para>

<refsection>
<title>Inputs and outputs</title>

<para>The document that appears on the <port>source</port> port is sent
to the command on “standard input”. The step is declared to allow a sequence
of documents to appear on <port>source</port>, this is only to allow
the source to be an empty sequence. If an empty sequence appears on the
<port>source</port> port, nothing is passed to standard input. It is an
error to send more than one document to the <port>source</port> port.</para>

<para>There’s no standard API for passing XML documents to external
commands, so they are sent as text. If the
<option>source-is-xml</option> option is “<literal>true</literal>”,
then the source document is serialized with the serialization options
specified and that text is sent to the command. If
<option>source-is-xml</option> option is “<literal>false</literal>”,
the XPath string-value of the document is passed.</para>

<para>The standard output of the command is read and returned on
<port>result</port>; the standard error output is read and returned on
<port>errors</port>. In order to assure that the result will be an
XML document, each of the results will be wrapped in a <tag>c:result</tag>
element.</para>

<para>If <option>result-is-xml</option> is “<literal>true</literal>”,
the standard output of the program is assumed to be XML and will be
parsed as a single document. If it is false, the output will be
returned as escaped text.</para>

<para>If <option>wrap-result-lines</option> is
“<literal>true</literal>”, a <tag>c:line</tag> element will be wrapped
around each line of output.</para>

<para>The same rules apply to the standard error output of the
program, with the <option>errors-is-xml</option> and
<option>wrap-error-lines</option> options, respectively.</para>

<para>If either of the results are XML, they are parsed using the same
rules that <tag>p:document</tag> uses.</para>

<para>The <port>exit-status</port> port always returns a single
<tag>c:result</tag> element which contains the system exit status that
the process returned. The specific exit status values returned by
a process invoked with <step>p:exec</step> are
<glossterm>implementation-dependent</glossterm>.</para>

<para>If a <option>failure-threshold</option> value is supplied, and
the exit status is greater than that threshold, then the
<step>p:exec</step> step will fail. This failure, like any step
failure, can be captured with a <tag>p:try</tag>.</para>
</refsection>
</refsection>

<refsection>
<title>Errors</title>
<informaltable>
<tgroup cols="2">
<colspec colnum="1" colwidth="1in"/>
<thead>
<row>
<entry>Error</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><error code="C0033"/></entry>
<entry>Occurs if the command cannot be run.
</entry>
</row>
<row>
<entry><error code="C0034"/></entry>
<entry>Occurs
if the current working directory cannot be changed
to the value of the <option>cwd</option> option.
</entry>
</row>
<row>
<entry><error code="C0063"/></entry>
<entry>Occurs
if the <option>path-separator</option> option is
specified and is not exactly one character long.
</entry>
</row>
<row>
<entry><error code="C0066"/></entry>
<entry>Occurs
if
the <option>arg-separator</option> option is specified and is not
exactly one character long.
</entry>
</row>
<row>
<entry><error code="D0006"/></entry>
<entry>Occurs if more than one document appears on the
<port>source</port> port of the <step>p:exec</step> step.
</entry>
</row>
<row>
<entry><error code="C0035"/></entry>
<entry>Occurs
if both
<option>result-is-xml</option> and <option>wrap-result-lines</option> or
<option>error-is-xml</option> and <option>wrap-error-lines</option>
are specified
</entry>
</row>
<row>
<entry><error code="C0064"/></entry>
<entry>Occurs
if the exit code from the command is greater than
the specified <option>failure-threshold</option> value.
</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</refsection>

<refsection>
<title>Examples</title>

<xi:include href="build/exec.xml" xpointer="xpath(/*/*)"/>

</refsection>

</refentry>
